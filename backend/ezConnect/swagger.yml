openapi: 3.0.0
info:
  title: "EzCopnnect REST API"
  description: "An API about people and notes"
  version: "0.0.1"

servers:
  - url: "/api"

components:
  schemas:
    SignUpRequest:
      type: "object"
      required:
        - email
      properties:
        email:
          type: string
          format: email
    SignUpNewUser:
      type: "object"
      required:
        - name
        - year
        - password
        - course
      properties:
        name:
          type: string
        year:
          type: integer
          maximum: 6
          minimum: 1
        course:
          type: string
        password:
          type: string
          format: password
  parameters:
    emailToken:
      in: path
      name: emailToken
      required: true
      schema:
        type: string
        minLength: 32
        maxLength: 32
        format: byte
      description: "Verification token embedded in the url given by the email"
    emailQueryString:
      in: query
      name: emailQueryString
      required: true
      schema:
        type: string
        format: email
      description: "Email address of the sign up request this token is associated with"
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: "ezConnect.auth.login.decode_token"
        
paths: 
  /auth/signup/:
    post: 
      operationId: "ezConnect.auth.signup.request"
      tags: 
        - "Auth"
        - "Sign Up"
      summary: "Send an email with the verification link for signing up"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
      responses:
        "200":
          description: "Verification email sent"
  /auth/signup/{emailToken}:
    put:
      operationId: "ezConnect.auth.signup.verify"
      tags:
        - "Auth"
        - "Sign Up"
      summary: "Verify email token and email to grant token for onboarding api"
      parameters:
        - $ref: "#/components/parameters/emailToken"
        - $ref: "#/components/parameters/emailQueryString"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpNewUser"
            example:
              name: "John Doe"
              year: 2
              course: "Double major in Social Work and Psychology"
              password: "VeryStrongPassword"
      responses:
        "200":
          description: "JSON with user id and JWT token"
  /auth/login:
    post:
      operationId: "ezConnect.auth.login.login_user"
      tags:
        - "Auth"
      summary: "Logs in a user by checking their email and password and returns a JWT token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: "hello@u.nus.edu"
              password: "VeryStrongPassword"
      responses:
        '200':
          description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                  JWT:
                    type: string
        '401':
          description: Unauthorized, wrong password or email
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /auth/login/who-am-i:
    get:
      operationId: "ezConnect.auth.login.who_am_i"
      tags:
        - "Auth"
      summary: "Returns the user ID of the authenticated user"
      security:
        - jwt: []
      responses:
        '200':
          description: User ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
        '401':
          description: Unauthorized


