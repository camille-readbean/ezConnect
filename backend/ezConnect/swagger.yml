openapi: 3.0.0
info:
  title: "EzCopnnect REST API"
  description: "An API about people and courses"
  version: "0.0.3"

servers:
  - url: "/api"

components:
  schemas:
    SignUpNewUser:
      type: "object"
      required:
        - name
        - email
        - year
        - degrees
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        year:
          type: integer
          maximum: 6
          minimum: 1
        degrees:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              title:
                type: string
        programmes:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              title:
                type: string
    PersonalStudyPlan:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: abcde123-1234-1234-1234-1234abcdef00
        date_updated:
          type: string
          example: 01 Jul 2023
        title:
          type: string
          example: Computer Science Major with Second Major in Math
        creator_id:
          type: string
          format: uuid
          example: 12345678-1234-1234-1234-1234abcdef00
        creator_name:
          type: string
          example: Jonathan Tan
        is_published:
          type: boolean
          example: true
        published_version_id:
          type: string
          format: uuid
          example: 12345678-1234-1234-1234-1234abcdef00
        semester_info_list:
          type: array
          items:
            $ref: "#/components/schemas/StudyPlanSemesterInformation"
    PublishedStudyPlan:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: abcde123-1234-1234-1234-1234abcdef00
        date_updated:
          type: string
          example: 01 Jul 2023
        title:
          type: string
          example: Computer Science Major with Second Major in Math
        description:
          type: string
        num_of_likes:
          type: integer
        creator_id:
          type: string
          format: uuid
          example: 12345678-1234-1234-1234-1234abcdef00
        creator_name:
          type: string
          example: Jonathan Tan
        semester_ids:
          type: object
          example: {
            "1": "abc11111-1234-1234-1234-1234abcdef00",
            "2": "def22222-1234-1234-1234-1234abcdef00",
            "3": "abc33333-1234-1234-1234-1234abcdef00",
            "4": "def44444-1234-1234-1234-1234abcdef00",
            "5": "abc55555-1234-1234-1234-1234abcdef00",
            "6": "def66666-1234-1234-1234-1234abcdef00",
            "7": "abc77777-1234-1234-1234-1234abcdef00",
            "8": "def88888-1234-1234-1234-1234abcdef00"
          }
        academic_plan:
          $ref: "#/components/schemas/AcademicPlan"
    PublishedStudyPlanWithLikedFavourited:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: abcde123-1234-1234-1234-1234abcdef00
        date_updated:
          type: string
          example: 01 Jul 2023
        title:
          type: string
          example: Computer Science Major with Second Major in Math
        description:
          type: string
        num_of_likes:
          type: integer
        creator_id:
          type: string
          format: uuid
          example: 12345678-1234-1234-1234-1234abcdef00
        creator_name:
          type: string
          example: Jonathan Tan
        is_favourited_by:
          type: boolean
          example: false
        is_liked_by:
          type: boolean
          example: true
        semester_ids:
          type: object
          example: {
            "1": "abc11111-1234-1234-1234-1234abcdef00",
            "2": "def22222-1234-1234-1234-1234abcdef00",
            "3": "abc33333-1234-1234-1234-1234abcdef00",
            "4": "def44444-1234-1234-1234-1234abcdef00",
            "5": "abc55555-1234-1234-1234-1234abcdef00",
            "6": "def66666-1234-1234-1234-1234abcdef00",
            "7": "abc77777-1234-1234-1234-1234abcdef00",
            "8": "def88888-1234-1234-1234-1234abcdef00"
          }
    StudyPlanSemesterInformation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 87654321-1234-1234-1234-1234abcdef00
        semester_number:
          type: integer
          example: 3
        total_units:
          type: integer
          example: 20
        course_codes:
          type: array
          example: [CS1101S, CS1231S, MA1521, IS1108, ES2660]
    AcademicPlan:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: abc54321-1234-1234-1234-1234abcdef00
        published_study_plan_id:
          type: string
          format: uuid
          example: abc54321-1234-1234-1234-1234abcdef00
        first_degree:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: abc54321-1234-1234-1234-1234abcdef00
            title:
              type: string
              example: Computer Science
        second_degree:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: abc54321-1234-1234-1234-1234abcdef00
            title:
              type: string
              example: Data Science and Economics
        second_major:
          type: string
          example: Mathematics
        minors:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: abc54321-1234-1234-1234-1234abcdef00
              title:
                type: string
                example: Minor in Communications and New Media
        special_programmes:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: abc54321-1234-1234-1234-1234abcdef00
              title:
                type: string
                example: University Town College Programme
    MentoringPost:
      type: object
      properties:
        title:
          type: string
          description: Title of the mentoring post
        description:
          type: string
          description: Description of the mentoring post
        course_code:
          type: string
          description: Code of the course user is mentoring
    UpdateMentoringPost:
      type: object
      properties:
        title:
          type: string
          description: Title of the mentoring post
        description:
          type: string
          description: Description of the mentoring post
        is_published:
          type: boolean
          description: Indicator if the mentoring post is published
    MentorPostingResponse:
      type: object
      properties:
        posting_uuid:
          type: string
          description: UUID of the mentoring posting
        course:
          type: string
          description: Code of the course
        title:
          type: string
          description: Title of the mentor posting
        description:
          type: string
          description: Description of the mentor posting
        date_updated:
          type: string
          format: date
          description: Date of the last update of the mentor posting
        name:
          type: string
          description: Name of the user behind this posting
        is_published:
          type: boolean
          description: Indicator if the mentoring post is published
    MentorPostingsResponse:
      type: object
      properties:
        postings:
          type: array
          items:
            $ref: '#/components/schemas/MentorPostingResponse'
  parameters:
    user_id:
      in: path
      name: user_id
      required: true
      schema:
        type: string
        minLength: 36
        maxLength: 36
        format: uuid
      description: "User ID"
    study_plan_id:
      in: path
      name: study_plan_id
      required: true
      schema:
        type: string
        format: uuid
      description: "The id of the study plan that this request is associated with"
    semester_id:
      in: path
      name: semester_id
      required: true
      schema:
        type: string
        format: uuid
        description: "Study plan semester id"
    mentor_posting_id:
      in: path
      name: mentor_posting_id
      description: UUID of the mentoring posting to update
      required: true
      schema:
        type: string
        format: uuid
    mentoring_match_id:
      in: path
      name: mentoring_match_id
      description: UUID of the mentor-mentee match
      required: true
      schema:
        type: string
        format: uuid
  securitySchemes:
    # Keeping it as JWT to faciliate debugging
    # Get the token manually from frontend and input it to authorise...
    # Swagger does not see mto support 
    # Also help in debugging as we can use a custom dev only jwt to skip
    # Azure B2C login, which is hard to do in CI/CD in the future...
    jwt:
      type: http
      description: |
        This actually relies on Azure AD B2C in the frontend for login
        Kept as JWT to enable manual input of the access token in Swagger UI
        for testing purposes. Swagger does not seem to work with Auth Code Flow 
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: "ezConnect.auth.login.decode_token"

        
paths: 
  /user/create-user:
    put: 
      operationId: "ezConnect.auth.signup.create_user"
      tags:
        - "Sign Up"
      summary: |
        Create account for user after logging in with Azure AD B2C.
        User ID comes from Azure B2C, will be used as primary key.
        UserId will come from token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpNewUser"
            example:
              name: "John Doe"
              email: "testemail@ruibin.me"
              year: 2
              degrees: [
                {
                  "id": "fce92068-5d0d-400a-aeb4-2673370b84c5",
                  "title": "Computer Science"
                },
                {
                  "id": "4a18721c-2f9a-42fd-b3d3-820e2564d352",
                  "title": "Medicine"
                }
              ]
              programmes: [
                {
                  "id": "e219ca40-ed55-4976-ae2a-c46f2a77ae02",
                  "title": "University Town College Programme"
                },
                {
                  "id": "5102f572-920a-400a-ae2c-3575fb7e8acf",
                  "title": "Minor in Meteorology and Climate Science"
                }
              ]
              azure_ad_oid: 12345678-1234-1234-1234-1234abcdef00
      security:
        - jwt: []
      responses:
        "200":
          description: User ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "409":
          description: "Invalid request: user already exist in database"
  /mentoring/mentors/new-mentor:
    put:
      tags: 
        - Mentoring
      operationId: "ezConnect.mentoring.mentor.create_mentor"
      summary: Create a mentoring post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentoringPost'
      security:
        - jwt: []
      responses:
        '200':
          description: Mentoring post created successfully
        '400':
          description: Invalid request body
  /mentoring/mentors:
    get:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.mentor.get_mentors"
      summary: return a list of all published mentors
      security:
        - jwt: []
      responses:
        '200':
          description: Mentors retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorPostingsResponse'
  /mentoring/mentors/get-user-mentor-postings:
    get:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.mentor.get_user_mentor_postings"
      summary: return a list of all of a user's mentor postings
      security:
        - jwt: []
      responses:
        '200':
          description: Mentors retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorPostingsResponse'
  /mentoring/mentors/{mentor_posting_id}:
    get:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.mentor.get_a_mentor"
      summary: Update mentor posting
      parameters:
        - $ref: '#/components/parameters/mentor_posting_id'
      security:
        - jwt: []
      responses:
        '200':
          description: Mentor request posting updated successfully
          description: Mentors retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorPostingsResponse'
  /mentoring/mentors/{mentor_posting_id}/update:
    put:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.mentor.update_mentor"
      summary: Update mentor posting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMentoringPost'
      parameters:
        - $ref: '#/components/parameters/mentor_posting_id'
      security:
        - jwt: []
      responses:
        '200':
          description: Mentor posting updated successfully
  /mentoring/mentors/{mentor_posting_id}/request:
    post:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.mentor.request_mentor"
      summary: Request a mentor for a mentor request
      parameters:
        - $ref: '#/components/parameters/mentor_posting_id'
      security:
        - jwt: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /mentoring/matches/{mentoring_match_id}/accept-mentee:
    post:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.matches.accept_mentee"
      summary: Accept or reject a mentor for a mentor match
      parameters:
        - $ref: '#/components/parameters/mentoring_match_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accept:
                  type: boolean
                message:
                  type: string
              required:
                - accept
                - message
      security:
        - jwt: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /mentoring/mentees/new-mentee:
    put:
      tags: 
        - Mentoring
      operationId: "ezConnect.mentoring.mentee.create_request"
      summary: Create a mentoring post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentoringPost'
      security:
        - jwt: []
      responses:
        '201':
          description: Mentoring post created successfully
        '400':
          description: Invalid request body
  /mentoring/mentees:
    get:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.mentee.get_mentees"
      summary: return a list of all published mentees
      security:
        - jwt: []
      responses:
        '200':
          description: Mentees retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorPostingsResponse'
  /mentoring/mentees/get-user-mentor-requests:
    get:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.mentee.get_user_mentor_requests"
      summary: return a list of all of a user's mentor requests
      security:
        - jwt: []
      responses:
        '200':
          description: Mentors retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorPostingsResponse'
  /mentoring/mentees/{mentor_posting_id}:
    get:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.mentee.get_a_mentee"
      summary: Update mentor posting
      parameters:
        - $ref: '#/components/parameters/mentor_posting_id'
      security:
        - jwt: []
      responses:
        '200':
          description: Mentor request posting updated successfully
          description: Mentors retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorPostingsResponse'
  /mentoring/mentees/{mentor_posting_id}/update:
    put:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.mentee.update_mentee"
      summary: Update mentor posting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMentoringPost'
      parameters:
        - $ref: '#/components/parameters/mentor_posting_id'
      security:
        - jwt: []
      responses:
        '200':
          description: Mentor request posting updated successfully
  /mentoring/mentees/{mentor_posting_id}/request:
    post:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.mentee.request_mentee"
      summary: Request a mentee for a mentor posting
      parameters:
        - $ref: '#/components/parameters/mentor_posting_id'
      security:
        - jwt: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /mentoring/matches/{mentoring_match_id}/accept-mentor:
    post:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.matches.accept_mentor"
      summary: Accept or reject a mentor for a mentor match
      parameters:
        - $ref: '#/components/parameters/mentoring_match_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accept:
                  type: boolean
                message:
                  type: string
              required:
                - accept
                - message
      security:
        - jwt: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /mentoring/matches/{mentoring_match_id}:
    get:
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.matches.get_a_match"
      summary: Get a mentor match details
      parameters:
        - $ref: '#/components/parameters/mentoring_match_id'
      security:
        - jwt: []
      responses:
        '200':
          description: Match retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorPostingsResponse'
  /mentoring/matches:
    get:
      summary: Get matches for a user
      tags:
        - Mentoring
      operationId: "ezConnect.mentoring.matches.get_matches"
      security:
        - jwt: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mentor_matches:
                    type: array
                    items:
                      type: object
                      properties:
                        posting_uuid:
                          type: string
                        course_code:
                          type: string
                        mentee_name:
                          type: string
                        status:
                          type: string
                        email:
                          type: string
                          format: email
                  mentee_matches:
                    type: array
                    items:
                      type: object
                      properties:
                        posting_uuid:
                          type: string
                        course_code:
                          type: string
                        mentor_name:
                          type: string
                        status:
                          type: string
                        email:
                          type: string
                          format: email
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /studyplan:
    post:
      operationId: ezConnect.study_plan.studyplan.create_study_plan
      tags:
        - Study Plan
      summary: Create a study plans
      requestBody:
        description: Creator ID of user that study plan belongs to
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                creator_id:
                  type: string
                  format: uuid
              required:
                - creator_id
            example:
              creator_id: 12a3b456-c7de-44ce-bde9-a123bc00237d
      responses:
        '200':
          description: Study plan successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  study_plan_id:
                    type: string
                    format: uuid
                example:
                  study_plan_id: 12a3b456-c7de-44ce-bde9-a123bc00237d
    
  /studyplan/{study_plan_id}:
    delete:
      operationId: ezConnect.study_plan.studyplan.delete_study_plan
      tags:
        - Study Plan
      summary: Delete an existing study plan
      parameters:
        - $ref: "#/components/parameters/study_plan_id"
      responses:
        '204':
          description: Deleted an existing study plan
        '404':
          description: Study plan does not exist

  /studyplan/user_personal/{user_id}:
    get:
      operationId: ezConnect.study_plan.studyplan.get_personal_study_plans
      tags:
        - Study Plan
      summary: Read a collection of personal study plans
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        '200': 
          description: Read a collection of personal study plans
          content:
            application/json:
              schema:
                type: object
                properties:
                  personal_study_plan_data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PersonalStudyPlan"
        '404':
          description: User does not exist

  /studyplan/personal/{study_plan_id}:
    get:
      operationId: ezConnect.study_plan.studyplan.get_a_personal_study_plan
      tags:
        - Study Plan
      summary: Read a particular personal study plan
      parameters:
        - $ref: "#/components/parameters/study_plan_id"
      responses:
        '200': 
          description: Information on a particular personal study plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonalStudyPlan"
        '404':
          description: Study plan does not exist
    put:
      operationId: ezConnect.study_plan.studyplan.update_personal_study_plan
      tags:
        - Study Plan
      summary: Update an existing personal study plan
      parameters:
        - $ref: "#/components/parameters/study_plan_id"
      requestBody:
        description: New study plan information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Computer Science Major with a minor in Mathematics
                semester_info_list:
                  type: array
                  items:
                    $ref: "#/components/schemas/StudyPlanSemesterInformation"
      responses:
        '200':
          description: Successfully updated a personal study Plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonalStudyPlan"
        '404':
          description: Study plan or course does not exist

  /studyplan/semester/{study_plan_id}:
    get:
      operationId: ezConnect.study_plan.study_plan_semester.get_all_semesters
      tags:
        - Study Plan Semester
      summary: Read a collection of semester information from an existing study plan
      parameters:
        - $ref: "#/components/parameters/study_plan_id"
      responses:
        '200':
          description: Read a collection of semester information from an existing study plan
          content:
            application/json:
              schema:
                type: object
                example: {
                  "1": {
                    "id": 87654321-1234-1234-1234-1234abcdef00,
                    "semester_number": 1,
                    "total_units": 20,
                    "course_codes": [CS1101S, CS1231S, MA1521, IS1108, ES2660]
                  },
                  "2": {
                    "id": 17654321-1234-1234-1234-1234abcdef00,
                    "semester_number": 2,
                    "total_units": 12,
                    "course_codes": [CS2030S, CS2040S, GEA1000]
                  }
                }
        '404':
          description: Study plan does not exist
    post:
      operationId: ezConnect.study_plan.study_plan_semester.create_semester
      tags:
        - Study Plan Semester
      summary: Create a new semester in an existing study plan
      parameters:
        - $ref: "#/components/parameters/study_plan_id"
      responses:
        '200':
          description: Study plan semester successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  new_semester_id:
                    type: string
                    example: 17654321-1234-1234-1234-1234abcdef00
        '404':
          description: Study plan does not exist
  
  /study_plan_semester/{semester_id}:
    get:
      operationId: ezConnect.study_plan.study_plan_semester.get_a_semester
      tags:
        - Study Plan Semester
      summary: Read information from a specific study plan semester
      parameters:
        - $ref: "#/components/parameters/semester_id"
      responses:
        '200':
          description: Read information from a specific study plan
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/StudyPlanSemesterInformation"
        '404':
          description: Study plan semester does not exist
    put:
      operationId: ezConnect.study_plan.study_plan_semester.update_semester_courses
      tags:
        - Study Plan Semester
      summary: Update courses in an existing study plan semester
      parameters:
        - $ref: "#/components/parameters/semester_id"
      requestBody:
        description: List of course codes that are in the given semester
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_codes:
                  type: array
            example:
              course_codes: [CS1101S, CS1231S, MA1521]
      responses:
        '200':
          description: Update courses in an existing study plan semester
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/StudyPlanSemesterInformation"
        '400':
          description: No information was inputted
        '404':
          description: Study plan semester does not exist
    delete:
      operationId: ezConnect.study_plan.study_plan_semester.delete_semester
      tags:
        - Study Plan Semester
      summary: Delete an existing study plan semester
      parameters:
        - $ref: "#/components/parameters/semester_id"
      responses:
        '204':
          description: Study plan semester successfully deleted
        '404':
          description: Study plan does not exist

  /studyplan/publish:
    get:
      operationId: ezConnect.study_plan.published_study_plan.get_published_study_plans
      tags:
        - Study Plan Publisher
      summary: Get a collection of published study plans
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
            format: uuid
            example: 12345678-1234-1234-1234-1234abcdef00
        - in: query
          name: ordering
          schema:
            type: string
            example: mostLikes
      responses:
        '200':
          description: Returned a collection of published study plans
          content:
            application/json:
              schema:
                type: object
                properties:
                  published_study_plans:
                    type: array
                    items:
                      $ref: "#/components/schemas/PublishedStudyPlan"

  /studyplan/publish/{study_plan_id}:
    get:
      operationId: ezConnect.study_plan.published_study_plan.get_published_study_plan_information
      tags:
        - Study Plan Publisher
      summary: Get information on an existing published study plan
      parameters:
        - $ref: "#/components/parameters/study_plan_id"
        - in: query
          name: user_id
          schema:
            type: string
            format: uuid
            example: 12345678-1234-1234-1234-1234abcdef00
      responses:
        '200': 
          description: Return published study plan information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishedStudyPlan"
        '404':
          description: Published study plan not found
    post:
      operationId: ezConnect.study_plan.published_study_plan.publish_study_plan
      tags:
        - Study Plan Publisher
      summary: Create a published study plan from an existing personal study plan
      parameters:
        - $ref: "#/components/parameters/study_plan_id"
      requestBody:
        description: The title and description associated with the new published study Plan
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Computer Science Major with Second Major in Math
                description:
                  type: string
                  example: I am currently a Y3 student. For Y1S2, I recommend that you overload but do not take CS2030S, CS2040S and CS2100 all at the same time.
                academic_plan_info:
                  type: object
                  properties:
                    first_degree_id:
                      type: string
                      format: uuid
                      example: 12a3b456-c7de-44ce-bde9-a123bc00237d
                    second_degree_id:
                      type: string
                      format: uuid
                      nullable: true
                      example: 12a3b456-c7de-44ce-bde9-a123bc00237d
                    second_major:
                      type: string
                      example: Math
                    minors_id_list:
                      type: array
                      items:
                        type: string
                        format: uuid
                        example: 12a3b456-c7de-44ce-bde9-a123bc00237d
                    special_programmes_id_list:
                      type: array
                      items:
                        type: string
                        format: uuid
                        example: 12a3b456-c7de-44ce-bde9-a123bc00237d
              required:
                - title
                - description
                - academic_plan_info
      responses:
        '200': 
          description: Successfully created a published study plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishedStudyPlan"
        '400':
          description: Title or description not inputted
        '404':
          description: Personal study plan not found
        '409':
          description: Personal study plan is already published
    put:
      operationId: ezConnect.study_plan.published_study_plan.update_published_study_plan
      tags:
        - Study Plan Publisher
      summary: Update an existing published study plan
      parameters:
        - $ref: "#/components/parameters/study_plan_id"
      requestBody:
        description: The title, description and personal study plan id associated with the new published study Plan
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Computer Science Major with Second Major in Math
                description:
                  type: string
                  example: I am currently a Y3 student. For Y1S2, I recommend that you overload but do not take CS2030S, CS2040S and CS2100 all at the same time.
                personal_study_plan_id:
                  type: string
                  format: uuid
                  example: abcde123-1234-1234-1234-1234abcdef00
                academic_plan_info:
                  type: object
                  properties:
                    first_degree_id:
                      type: string
                      format: uuid
                      example: 12a3b456-c7de-44ce-bde9-a123bc00237d
                    second_degree_id:
                      type: string
                      format: uuid
                      nullable: true
                      example: 12a3b456-c7de-44ce-bde9-a123bc00237d
                    second_major:
                      type: string
                      example: Math
                    minors_id_list:
                      type: array
                      items:
                        type: string
                        format: uuid
                        example: 12a3b456-c7de-44ce-bde9-a123bc00237d
                    special_programmes_id_list:
                      type: array
                      items:
                        type: string
                        format: uuid
                        example: 12a3b456-c7de-44ce-bde9-a123bc00237d
              required:
                - title
                - description
                - personal_study_plan_id
                - academic_plan_info
      responses:
        '200': 
          description: Successfully updated a published study plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishedStudyPlan"
        '400':
          description: Title or description or personal study plan id not inputted
        '404':
          description: Either published or personal study plan not found

  /studyplan/publish/copy:
    post:
      operationId: ezConnect.study_plan.published_study_plan.create_study_plan_copy
      tags:
        - Study Plan Publisher
      summary: Create a copy of an existing published study Plan
      requestBody:
        description: The published study plan id and user id associated with this request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                published_study_plan_id:
                  type: string
                  format: uuid
                  example: abcde123-1234-1234-1234-1234abcdef00
                user_id:
                  type: string
                  format: uuid
                  example: 12345678-1234-1234-1234-1234abcdef00
              required:
                - published_study_plan_id
                - user_id
      responses:
        '200':
          description: Created a personal copy of a published study plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonalStudyPlan"
        '400':
          description: Published study plan id and user id not inputted
        '404':
          description: Published study plan not found

  /studyplan/favourite/{user_id}:
    get:
      operationId: ezConnect.study_plan.published_study_plan.get_favourited_published_study_plans
      tags:
        - Study Plan Post
      summary: Get all published study plans favourited by a user
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        '200':
          description: Read a collection of published study plans favourited by a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  favourited_study_plans:
                    type: array
                    items:
                      $ref: "#/components/schemas/PublishedStudyPlanWithLikedFavourited"
        '404':
          description: User does not exist
    post:
      operationId: ezConnect.study_plan.published_study_plan.favourite_a_study_plan
      tags: 
        - Study Plan Post
      summary: Favourite an existing published study plan
      parameters:
        - $ref: "#/components/parameters/user_id"
      requestBody:
        description: The ID of the published study plan to favourite
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                published_study_plan_id:
                  type: string
                  format: uuid
                  example: 12a3b456-c7de-44ce-bde9-a123bc00237d
              required:
                - published_study_plan_id
      responses:
        '204':
          description: Successfully favourited a published study plan
        '400':
          description: Published study plan id not inputted
        '404':
          description: User or published study plan does not exist
    delete:
      operationId: ezConnect.study_plan.published_study_plan.unfavourite_a_study_plan
      tags: 
        - Study Plan Post
      summary: Unfavourite an existing published study plan
      parameters:
        - $ref: "#/components/parameters/user_id"
        - in: query
          name: published_study_plan_id
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-1234-1234-1234abcdef00
      responses:
        '204':
          description: Successfully unfavourited a published study plan
        '400':
          description: Published study plan id not inputted
        '404':
          description: User or published study plan does not exist
        '409':
          description: Published study plan is not favourited by user

  /studyplan/like/{user_id}:
    get:
      operationId: ezConnect.study_plan.published_study_plan.get_liked_published_study_plans
      tags:
        - Study Plan Post
      summary: Get all published study plans liked by a user
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        '200':
          description: Read a collection of published study plans liked by a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked_study_plans:
                    type: array
                    items:
                      $ref: "#/components/schemas/PublishedStudyPlanWithLikedFavourited"
        '404':
          description: User does not exist
    post:
      operationId: ezConnect.study_plan.published_study_plan.like_a_study_plan
      tags: 
        - Study Plan Post
      summary: Like an existing published study plan
      parameters:
        - $ref: "#/components/parameters/user_id"
      requestBody:
        description: The ID of the published study plan to like
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                published_study_plan_id:
                  type: string
                  format: uuid
                  example: 12a3b456-c7de-44ce-bde9-a123bc00237d
              required:
                - published_study_plan_id
      responses:
        '204':
          description: Successfully liked a published study plan
        '400':
          description: Published study plan id not inputted
        '404':
          description: User or published study plan does not exist
    delete:
      operationId: ezConnect.study_plan.published_study_plan.unlike_a_study_plan
      tags: 
        - Study Plan Post
      summary: Unlike an existing published study plan
      parameters:
        - $ref: "#/components/parameters/user_id"
        - in: query
          name: published_study_plan_id
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-1234-1234-1234abcdef00
      responses:
        '204':
          description: Successfully unliked a published study plan
        '400':
          description: Published study plan id not inputted
        '404':
          description: User or published study plan does not exist
        '409':
          description: Published study plan is not liked by user

  /studyplan/view:
    post:
      operationId: ezConnect.study_plan.published_study_plan.add_viewership
      tags: 
        - Study Plan Post
      summary: Add view to an existing published study plan
      requestBody:
        description: The user ID and the ID of the published study plan to like
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                  example: 12a3b456-c7de-44ce-bde9-a123bc00237d
                published_study_plan_id:
                  type: string
                  format: uuid
                  example: 12a3b456-c7de-44ce-bde9-a123bc00237d
              required:
                - user_id
                - published_study_plan_id
      responses:
        '204':
          description: Successfully added view to a published study plan
        '400':
          description: User id or published study plan id not inputted
        '404':
          description: User or published study plan does not exist
